# Build and Release Fast Duplicate Finder
# Creates GitHub releases for Windows, macOS, and Linux when a tag starting with 'v' is pushed
#
# TODO: Add support for additional architectures in future releases:
# - Linux ARM64: Cross-compilation from Ubuntu x64
# - Windows ARM64: LLVM MinGW cross-compilation (requires Flutter master channel)

name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x64 - Native build on Ubuntu
          - os: ubuntu-latest
            platform: linux
            arch: x64
            go-os: linux
            go-arch: amd64
            cli-executable: fast-duplicate-finder
            gui-archive: fast-duplicate-finder-linux-x64.AppImage
            cli-archive: fast-duplicate-finder-cli-linux-x64.zip
            flutter-build-path: build/linux/x64/release/bundle
            cc: gcc
            
          # Windows x64 - MinGW build on Windows
          - os: windows-latest
            platform: windows
            arch: x64
            go-os: windows
            go-arch: amd64
            cli-executable: fast-duplicate-finder.exe
            gui-archive: fast-duplicate-finder-windows-x64.msix
            cli-archive: fast-duplicate-finder-cli-windows-x64.zip
            flutter-build-path: build/windows/x64/runner/Release
            cc: x86_64-w64-mingw32-gcc
            
          # macOS x64 - Native build on macOS 13
          - os: macos-13
            platform: macos
            arch: x64
            go-os: darwin
            go-arch: amd64
            cli-executable: fast-duplicate-finder
            gui-archive: fast-duplicate-finder-macos-x64.dmg
            cli-archive: fast-duplicate-finder-cli-macos-x64.zip
            flutter-build-path: build/macos/Build/Products/Release/fastdupefinder.app
            cc: clang
            
          # macOS ARM64 - Native build on macOS 14
          - os: macos-14
            platform: macos
            arch: arm64
            go-os: darwin
            go-arch: arm64
            cli-executable: fast-duplicate-finder
            gui-archive: fast-duplicate-finder-macos-arm64.dmg
            cli-archive: fast-duplicate-finder-cli-macos-arm64.zip
            flutter-build-path: build/macos/Build/Products/Release/fastdupefinder.app
            cc: clang

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend/go.sum

      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Linux Build Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libgtk-3-dev \
            gcc \
            build-essential \
            fuse \
            libfuse2
        shell: bash

      - name: Install AppImageTool for Linux
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
        shell: bash

      - name: Install Windows Build Dependencies
        if: runner.os == 'Windows'
        run: |
          # MinGW is already available on windows-latest
          echo "Using built-in MinGW for Windows x64"
        shell: bash
      
      - name: Build CLI Application
        env:
          CC: ${{ matrix.cc }}
          GOOS: ${{ matrix.go-os }}
          GOARCH: ${{ matrix.go-arch }}
        run: |
          echo "Building CLI for ${{ matrix.platform }}-${{ matrix.arch }}..."
          cd backend
          go build -o ../${{ matrix.cli-executable }} main.go
          echo "CLI build completed: ${{ matrix.cli-executable }}"
        shell: bash

      - name: Build Shared Library for Flutter
        env:
          CC: ${{ matrix.cc }}
        run: |
          echo "Building shared library for ${{ matrix.platform }}-${{ matrix.arch }}..."
          chmod +x ./scripts/build_and_deploy.sh
          ./scripts/build_and_deploy.sh --platform ${{ matrix.go-os }} --arch ${{ matrix.go-arch }}
          echo "Shared library build completed"
        shell: bash

      - name: Prepare Flutter Native Libraries
        run: |
          echo "Cleaning native libraries for ${{ matrix.platform }}..."
          cd flutter_app/fastdupefinder/lib/native
          
          if [ "${{ matrix.platform }}" == "macos" ]; then
            # Keep only .dylib and .h files for macOS
            find . -type f ! -name "*.dylib" ! -name "*.h" -delete
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            # Keep only .so and .h files for Linux
            find . -type f ! -name "*.so" ! -name "*.h" -delete
          elif [ "${{ matrix.platform }}" == "windows" ]; then
            # Keep only .dll and .h files for Windows
            find . -type f ! -name "*.dll" ! -name "*.h" -delete
          fi
          
          echo "Native libraries prepared for ${{ matrix.platform }}"
        shell: bash

      - name: Build Flutter GUI Application
        run: |
          echo "Building Flutter GUI for ${{ matrix.platform }}-${{ matrix.arch }}..."
          cd flutter_app/fastdupefinder
          
          # All platforms use standard build command (no --target-platform in stable channel)
          flutter build ${{ matrix.platform }} --release
          
          echo "Flutter GUI build completed"
        shell: bash

      - name: Package GUI Application (Linux - AppImage)
        if: runner.os == 'Linux'
        run: |
          echo "Creating AppImage for Linux..."
          cd flutter_app/fastdupefinder
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy the Flutter app
          cp -r "${{ matrix.flutter-build-path }}"/* AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/fastdupefinder.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Fast Duplicate Finder
          Exec=fastdupefinder
          Icon=fastdupefinder
          Categories=Utility;
          EOF
          
          # Create a simple icon (you should replace this with your actual icon)
          convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/fastdupefinder.png || echo "Using placeholder icon"
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/fastdupefinder" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Create the AppImage
          appimagetool AppDir "${{ matrix.gui-archive }}" || echo "AppImage creation failed, falling back to tar.gz"
          
          # Fallback to tar.gz if AppImage creation fails
          if [ ! -f "${{ matrix.gui-archive }}" ]; then
            tar -czf "$(basename ${{ matrix.gui-archive}} .AppImage).tar.gz" -C "${{ matrix.flutter-build-path }}" .
            mv "$(basename ${{ matrix.gui-archive}} .AppImage).tar.gz" "${{ matrix.gui-archive }}"
          fi
          
          echo "Linux GUI packaged: ${{ matrix.gui-archive }}"
        shell: bash
        
      - name: Package GUI Application (macOS - DMG)
        if: runner.os == 'macOS'
        run: |
          echo "Creating DMG for macOS..."
          cd flutter_app/fastdupefinder
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg_temp
          cp -R "${{ matrix.flutter-build-path }}" dmg_temp/
          
          # Create the DMG
          hdiutil create -volname "Fast Duplicate Finder" \
            -srcfolder dmg_temp \
            -ov -format UDZO \
            "${{ matrix.gui-archive }}"
          
          echo "macOS GUI packaged: ${{ matrix.gui-archive }}"
        shell: bash

      - name: Package GUI Application (Windows - MSIX)
        if: runner.os == 'Windows'
        run: |
          echo "Creating MSIX package for Windows..."
          cd flutter_app/fastdupefinder
          
          # Flutter should have built MSIX if configured, fallback to ZIP if not
          if [ -f "build/windows/x64/runner/Release/fastdupefinder.msix" ]; then
            cp "build/windows/x64/runner/Release/fastdupefinder.msix" "${{ matrix.gui-archive }}"
          else
            echo "MSIX not found, creating ZIP fallback..."
            7z a -tzip "${{ matrix.gui-archive }}.zip" "${{ matrix.flutter-build-path }}"
            mv "${{ matrix.gui-archive }}.zip" "${{ matrix.gui-archive }}"
          fi
          
          echo "Windows GUI packaged: ${{ matrix.gui-archive }}"
        shell: bash

      - name: Package CLI Application
        run: |
          echo "Packaging CLI application..."
          
          # All platforms use ZIP format for CLI
          7z a -tzip "${{ matrix.cli-archive }}" "${{ matrix.cli-executable }}"
          
          echo "CLI packaged: ${{ matrix.cli-archive }}"
        shell: bash

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.cli-archive }}
            flutter_app/fastdupefinder/${{ matrix.gui-archive }}
          body: |
            # Fast Duplicate Finder ${{ github.ref_name }}
            
            Automated release build for version ${{ github.ref_name }}.
            
            ## Downloads
            - **GUI Applications**: Native desktop packages for each platform
            - **CLI Applications**: Command-line tools for scripting and automation
            
            ## Package Formats
            - **Linux**: `.AppImage` (portable) and `.zip` (CLI)
            - **Windows**: `.msix` (Microsoft Store format) and `.zip` (CLI)  
            - **macOS**: `.dmg` (disk image) and `.zip` (CLI)
            
            ## Platform Support
            - **Linux x64**: Native build
            - **Windows x64**: MinGW build  
            - **macOS x64**: Native build on macOS 13
            - **macOS ARM64**: Native build on macOS 14
            
            _Note: Linux ARM64 and Windows ARM64 support coming in future releases_
            
            Built on: ${{ steps.date.outputs.date }}
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
